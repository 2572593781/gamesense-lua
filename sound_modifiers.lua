--local variables for API. Automatically generated by https://github.com/simpleavaster/gslua/blob/master/authors/sapphyrus/generate_api.lua 
local client_latency, client_set_clan_tag, client_log, client_draw_rectangle, client_draw_indicator, client_draw_circle_outline, client_timestamp, client_world_to_screen, client_userid_to_entindex = client.latency, client.set_clan_tag, client.log, client.draw_rectangle, client.draw_indicator, client.draw_circle_outline, client.timestamp, client.world_to_screen, client.userid_to_entindex 
local client_draw_circle, client_draw_gradient, client_set_event_callback, client_screen_size, client_trace_line, client_draw_text, client_color_log = client.draw_circle, client.draw_gradient, client.set_event_callback, client.screen_size, client.trace_line, client.draw_text, client.color_log 
local client_system_time, client_delay_call, client_visible, client_exec, client_open_panorama_context, client_set_cvar, client_eye_position = client.system_time, client.delay_call, client.visible, client.exec, client.open_panorama_context, client.set_cvar, client.eye_position 
local client_draw_hitboxes, client_get_cvar, client_draw_line, client_camera_angles, client_draw_debug_text, client_random_int, client_random_float = client.draw_hitboxes, client.get_cvar, client.draw_line, client.camera_angles, client.draw_debug_text, client.random_int, client.random_float 
local entity_get_player_resource, entity_get_local_player, entity_is_enemy, entity_get_bounding_box, entity_is_dormant, entity_get_steam64, entity_get_player_name, entity_hitbox_position, entity_get_game_rules, entity_get_all = entity.get_player_resource, entity.get_local_player, entity.is_enemy, entity.get_bounding_box, entity.is_dormant, entity.get_steam64, entity.get_player_name, entity.hitbox_position, entity.get_game_rules, entity.get_all 
local entity_set_prop, entity_is_alive, entity_get_player_weapon, entity_get_prop, entity_get_players, entity_get_classname = entity.set_prop, entity.is_alive, entity.get_player_weapon, entity.get_prop, entity.get_players, entity.get_classname 
local globals_realtime, globals_absoluteframetime, globals_tickcount, globals_lastoutgoingcommand, globals_curtime, globals_mapname, globals_tickinterval = globals.realtime, globals.absoluteframetime, globals.tickcount, globals.lastoutgoingcommand, globals.curtime, globals.mapname, globals.tickinterval 
local globals_framecount, globals_frametime, globals_maxplayers = globals.framecount, globals.frametime, globals.maxplayers 
local ui_new_slider, ui_new_combobox, ui_reference, ui_is_menu_open, ui_set_visible, ui_new_textbox, ui_new_color_picker, ui_set_callback, ui_set = ui.new_slider, ui.new_combobox, ui.reference, ui.is_menu_open, ui.set_visible, ui.new_textbox, ui.new_color_picker, ui.set_callback, ui.set 
local ui_new_checkbox, ui_new_hotkey, ui_new_button, ui_new_multiselect, ui_get = ui.new_checkbox, ui.new_hotkey, ui.new_button, ui.new_multiselect, ui.get 
local math_ceil, math_tan, math_cos, math_sinh, math_pi, math_max, math_atan2, math_floor, math_sqrt, math_deg, math_atan, math_fmod, math_acos = math.ceil, math.tan, math.cos, math.sinh, math.pi, math.max, math.atan2, math.floor, math.sqrt, math.deg, math.atan, math.fmod, math.acos 
local math_pow, math_abs, math_min, math_sin, math_log, math_exp, math_cosh, math_asin, math_rad = math.pow, math.abs, math.min, math.sin, math.log, math.exp, math.cosh, math.asin, math.rad 
local table_sort, table_remove, table_concat, table_insert = table.sort, table.remove, table.concat, table.insert 
local string_find, string_format, string_gsub, string_len, string_gmatch, string_match, string_reverse, string_upper, string_lower, string_sub = string.find, string.format, string.gsub, string.len, string.gmatch, string.match, string.reverse, string.upper, string.lower, string.sub 
local renderer_circle_outline, renderer_rectangle, renderer_gradient, renderer_circle, renderer_text, renderer_line, renderer_measure_text, renderer_indicator, renderer_world_to_screen = renderer.circle_outline, renderer.rectangle, renderer.gradient, renderer.circle, renderer.text, renderer.line, renderer.measure_text, renderer.indicator, renderer.world_to_screen 
--end of local variables 

local mixers_list = {
	"Footsteps",
	"Own Footsteps",
	"Weapons",
	"Ambient noise",
	"Music",
	"Radio"
}

--values are the original volume the new value will be modified by, found using snd_soundmixer_list_mix_groups / snd_getmixer
local mixers_names = {
	["Footsteps"] = {
		["GlobalFootsteps"] = 1.00
	},
	["Own Footsteps"] = {
		["PlayerFootsteps"] = 0.13
	},
	["Weapons"] = {
		["Weapons1"] = 0.70,
		["FoleyWeapons"] = 0.70,
		["AllWeapons"] = 1.00,
		["DistWeapons"] = 0.70,
	},
	["Ambient noise"] = {
		["Ambient"] = 0.25,
		["ExplosionsDecoy"] = 1.60
	},
	["Music"] = {
		["SelectedMusic"] = 0.60,
		["BuyMusic"] = 0.80,
		["Music"] = 1.00
	},
	["Radio"] = {
		["Radio"] = 0.20,
		["Bot"] = 0.20,
		["Dialog"] = 0.1,
		["Commander"] = 0.30,
	}
}

local modifier_reference = {}
local cvar_snd_setmixer = cvar.snd_setmixer
local enabled_reference = ui.new_checkbox("MISC", "Miscellaneous", "Sound volume modifiers")

local function update_mixers(mixer_name)
	local mixers = mixer_name ~= nil and {mixer_name} or mixers_list
	for i=1, #mixers do
		local mixer = mixers[i]
		local mixer_data = mixers_names[mixer]
		local modifier = ui_get(modifier_reference[mixer])*0.01

		if not ui_get(enabled_reference) then
			modifier = 1
		end

		for mixer_current_name, mixer_default_volume in pairs(mixer_data) do
			cvar_snd_setmixer:invoke_callback(mixer_current_name, "vol", tostring(mixer_default_volume*modifier))
		end
	end
end

local function on_modifier_changed(modifier_name)
	update_mixers({modifier_name})
end

for i=1, #mixers_list do
	local mixer = mixers_list[i]
	modifier_reference[mixer] = ui_new_slider("MISC", "Miscellaneous", mixer .. " volume modifier", 0, 1000, 100, true, "%", 1, {[0] = "        Muted"})
	ui_set_callback(modifier_reference[mixer], function()
		update_mixers(mixer)
	end)
end

local function on_enabled_changed()
	local enabled = ui_get(enabled_reference)
	for i=1, #mixers_list do
		ui_set_visible(modifier_reference[mixers_list[i]], enabled)
	end
	update_mixers()
end
ui.set_callback(enabled_reference, on_enabled_changed)
on_enabled_changed()
