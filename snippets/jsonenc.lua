-- based on https://github.com/grafi-tt/lunajson/blob/master/src/lunajson/encoder.lua and https://github.com/bungle/lua-resty-prettycjson/blob/master/lib/resty/prettycjson.lua
local json_encode, json_encode_pretty
do local a,b,c,d,e=string.byte,string.find,string.format,string.gsub,string.match;local f,g,h=table.concat,string.sub,string.rep;local i,j=1/0,-1/0;local k='[^ -!#-[%]^-\255]'do local n,o;local p,q;local function r(n)q[p]=tostring(n)p=p+1 end;local s=e(tostring(0.5),'[^0-9]')local t=e(tostring(12345.12345),'[^0-9'..s..']')if s=='.'then s=nil end;local u;if s or t then u=true;if s and b(s,'%W')then s='%'..s end;if t and b(t,'%W')then t='%'..t end end;local v=function(w)if j<w and w<i then local x=tostring(w)if u then if t then x=d(x,t,'')end;if s then x=d(x,s,'.')end end;q[p]=x;p=p+1;return end;error('invalid number')end;local y;local z={['"']='\\"',['\\']='\\\\',['\b']='\\b',['\f']='\\f',['\n']='\\n',['\r']='\\r',['\t']='\\t',__index=function(_,B)return c('\\u00%02X',a(B))end}setmetatable(z,z)local function C(x)q[p]='"'if b(x,k)then x=d(x,k,z)end;q[p+1]=x;q[p+2]='"'p=p+3 end;local function D(E)local F=E[0]if type(F)=='number'then q[p]='['p=p+1;for G=1,F do y(E[G])q[p]=','p=p+1 end;if F>0 then p=p-1 end;q[p]=']'else F=E[1]if F~=nil then q[p]='['p=p+1;local G=2;repeat y(F)F=E[G]if F==nil then break end;G=G+1;q[p]=','p=p+1 until false;q[p]=']'else q[p]='{'p=p+1;local F=p;for H,n in pairs(E)do C(H)q[p]=':'p=p+1;y(n)q[p]=','p=p+1 end;if p>F then p=p-1 end;q[p]='}'end end;p=p+1 end;local I={boolean=r,number=v,string=C,table=D}setmetatable(I,I)function y(n)if n==o then q[p]='null'p=p+1;return end;return I[type(n)](n)end;function json_encode(J,K)n,o=J,K;p,q=1,{}y(n)return f(q)end;function json_encode_pretty(n,L,M,N)local x,O=json_encode(n)if not x then return x,O end;L,M,N=L or"\n",M or"\t",N or" "local p,G,H,w,P,Q,R=1,0,0,#x,{},nil,nil;local S=g(N,-1)=="\n"for T=1,w do local B=g(x,T,T)if not R and(B=="{"or B=="[")then P[p]=Q==":"and f{B,L}or f{h(M,G),B,L}G=G+1 elseif not R and(B=="}"or B=="]")then G=G-1;if Q=="{"or Q=="["then p=p-1;P[p]=f{h(M,G),Q,B}else P[p]=f{L,h(M,G),B}end elseif not R and B==","then P[p]=f{B,L}H=-1 elseif not R and B==":"then P[p]=f{B,N}if S then p=p+1;P[p]=h(M,G)end else if B=='"'and Q~="\\"then R=not R and true or nil end;if G~=H then P[p]=h(M,G)p,H=p+1,G end;P[p]=B end;Q,p=B,p+1 end;return f(P)end end end

-- Usage: json_encode_pretty(dt, [lf = "\n", [id = "\t", [ac = " ", [ec = function]]]]) (https://github.com/bungle/lua-resty-prettycjson#lua-api)
-- print(json_encode_pretty({
-- 	foo=true,
-- 	[8]=5.05,
-- 	array={
-- 		"a", "b", "c"
-- 	}
-- }))
